import org.apache.tools.ant.filters.ReplaceTokens

//buildscript { repositories { jcenter() maven} }
plugins {
    id "java"
    id 'com.github.johnrengelman.shadow' version "6.0.0"
    id "com.eden.orchidPlugin" version "0.21.1"
    id "maven-publish"
}
group 'io.ib67.oni'
version "1.0-M1-dev-1"
targetCompatibility=1.8
sourceCompatibility=1.8
repositories {
    mavenCentral()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" } //for orchid
    maven {
        name = 'codemc-repo'
        url = 'https://repo.codemc.io/repository/nms-local/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}
shadowJar{
    relocate 'com.github.kevinsawicki.http','io.ib67.oni.util.network'
}
allprojects {
    repositories {
        maven { url = "https://jitpack.io" }
    }
    compileJava {
        options.compilerArgs << '-XDignore.symbol.file'
        options.fork = true
        options.forkOptions.executable = 'javac'
    }
   java{
       withSourcesJar()
       withJavadocJar()
   }
    afterEvaluate{
        if(!project.name.contains("Test")){
            publishing {
                publications {
                    mavenJars(MavenPublication) {
                        groupId = project.property("group")
                        artifactId = project.name
                        version = project.version
                        from project.components.java
                    }
                }
                repositories {
                    maven {
                        url = "/tmp/repo"
                        name = "TmpLocal"
                    }
                    maven {
                        def repoAlias="",repoToken="";
                        if(file("${System.getProperty("user.home")}/.gradle/gradle.properties").exists()){
                            Properties localConf = new Properties()
                            localConf.load(new FileReader("${System.getProperty("user.home")}/.gradle/gradle.properties"))
                            repoAlias = localConf.getProperty("SF_REPO_ALIAS")
                            repoToken = localConf.getProperty("SF_REPO_TOKEN")
                        }
                        def baseUrl = "https://repo.sfclub.cc"
                        def releasesRepoUrl = "$baseUrl/releases"
                        def snapshotsRepoUrl = "$baseUrl/snapshots"
                        url = project.version.toString().contains("dev") ? snapshotsRepoUrl : releasesRepoUrl
                        name = "SFOfficial"
                        credentials {
                            username = repoAlias
                            password = repoToken
                        }
                    }
                }
            }
        }
    }
}
subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: "maven-publish"
}
dependencies {
    compileOnly 'org.spigotmc:spigot:1.14.4-R0.1-20191224.232152-15'
    testCompileOnly 'org.spigotmc:spigot:1.14.4-R0.1-20191224.232152-15'
    compileOnly 'org.jetbrains:annotations:20.1.0'
    compile group: 'com.github.kevinsawicki', name: 'http-request', version: '6.0'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    orchidRuntime 'io.github.javaeden.orchid:OrchidEditorial:0.21.0'
    orchidRuntime("io.github.javaeden.orchid:OrchidSearch:0.21.0")
    orchidRuntime("io.github.javaeden.orchid:OrchidSyntaxHighlighter:0.21.0")
    orchidRuntime("io.github.javaeden.orchid:OrchidWiki:0.21.0")
    orchidRuntime "io.github.javaeden.orchid:OrchidJavadoc:0.21.0"
    orchidRuntime("io.github.javaeden.orchid:OrchidPluginDocs:0.21.0")
}
processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}
publishing{
    publications{
        fatJar(MavenPublication){ publication ->
            //For download directly. Full dependencies
            groupId = project.property("group")
            artifactId = project.name+"-all"
            version = project.version
            project.shadow.component(publication)
        }
    }
}
shadowJar{
    manifest{
        attributes "Type":"Shadow"
    }
}
def docLang=getLang()
String getLang(){
    if(!hasProperty("docLang")){
        return "en_US"
    }else{
        def lang= getProperty("docLang")
        if(!file("./orchid/locale/$lang").exists()){
            throw new FileNotFoundException("Cannot find locale $lang")
        }
        if(!lang.equals("zh_CN")){
            println "WARNING: The mainly active language of this project is 'zh_CN',${lang} may not sync."
        }
        return lang
    }
}
orchid {
    srcDir  = "orchid/locale/${docLang}"
}
//task shadowFlag{}