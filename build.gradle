import org.apache.tools.ant.filters.ReplaceTokens

//buildscript { repositories { jcenter() maven} }
plugins {
    id "java"
    id 'com.github.johnrengelman.shadow' version "6.0.0"
    id "com.eden.orchidPlugin" version "0.21.1"
    id "maven-publish"
}
group 'io.ib67.oni'
def ver = '1-1.0'
version = ver
repositories {
    mavenCentral()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" } //for orchid
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
}
allprojects {
    repositories {
        maven { url = "https://jitpack.io" }
    }

}
subprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
}
dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.14.4-R0.1-SNAPSHOT'
    compileOnly 'org.jetbrains:annotations:20.1.0'
    compile project(":MavenDownloader")
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.16'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    orchidRuntime 'io.github.javaeden.orchid:OrchidEditorial:0.21.0'
    orchidRuntime("io.github.javaeden.orchid:OrchidSearch:0.21.0")
    orchidRuntime("io.github.javaeden.orchid:OrchidSyntaxHighlighter:0.21.0")
    orchidRuntime("io.github.javaeden.orchid:OrchidWiki:0.21.0")
    orchidRuntime "io.github.javaeden.orchid:OrchidJavadoc:0.21.0"
    orchidRuntime("io.github.javaeden.orchid:OrchidPluginDocs:0.21.0")
}
publishing {
    publications {
        artifact(MavenPublication) {
            groupId = "io.ib67.oni"
            artifactId = "Oni"
            version = ver

            from components.java
        }
    }
    repositories {
        maven {
            url = "/tmp/repo"
            name = "TmpLocal"
        }
        maven {
            def repoAlias="",repoToken="";
            if(file("${System.getProperty("user.home")}/.gradle/gradle.properties").exists()){
                Properties localConf = new Properties()
                localConf.load(new FileReader("${System.getProperty("user.home")}/.gradle/gradle.properties"))
                repoAlias = localConf.getProperty("SF_REPO_ALIAS")
                repoToken = localConf.getProperty("SF_REPO_TOKEN")
            }
            def baseUrl = "https://repo.sfclub.cc"
            def releasesRepoUrl = "$baseUrl/releases"
            def snapshotsRepoUrl = "$baseUrl/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            name = "SFOfficial"
            credentials {
                username = repoAlias
                password = repoToken
            }
        }
    }
}
processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}
def docLang=getLang()
String getLang(){
    if(!hasProperty("docLang")){
        return "en_US"
    }else{
        def lang= getProperty("docLang")
        if(!file("./orchid/locale/$lang").exists()){
            throw new FileNotFoundException("Cannot find locale $lang")
        }
        return lang
    }
}
orchid {
    srcDir  = "orchid/locale/${docLang}"
}